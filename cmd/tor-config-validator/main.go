// Package main provides a configuration validation and generation tool for go-tor.
package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/opd-ai/go-tor/pkg/config"
)

var (
	version   = "0.1.0-dev"
	buildTime = "unknown"
)

func main() {
	// Parse command-line flags
	configFile := flag.String("config", "", "Path to configuration file to validate")
	generateSample := flag.Bool("generate", false, "Generate sample configuration file")
	outputFile := flag.String("output", "", "Output file for generated configuration (default: stdout)")
	showVersion := flag.Bool("version", false, "Show version information")
	verbose := flag.Bool("verbose", false, "Verbose output")
	flag.Parse()

	if *showVersion {
		fmt.Printf("tor-config-validator version %s (built %s)\n", version, buildTime)
		fmt.Println("Configuration validation and generation tool for go-tor")
		os.Exit(0)
	}

	// Generate sample config if requested
	if *generateSample {
		if err := generateSampleConfig(*outputFile, *verbose); err != nil {
			fmt.Fprintf(os.Stderr, "Error generating sample config: %v\n", err)
			os.Exit(1)
		}
		os.Exit(0)
	}

	// Validate config file if provided
	if *configFile != "" {
		if err := validateConfigFile(*configFile, *verbose); err != nil {
			fmt.Fprintf(os.Stderr, "Validation failed: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("✓ Configuration is valid")
		os.Exit(0)
	}

	// No operation specified
	printUsage()
	os.Exit(1)
}

func printUsage() {
	fmt.Println("tor-config-validator - Configuration tool for go-tor")
	fmt.Println()
	fmt.Println("Usage:")
	fmt.Println("  tor-config-validator [options]")
	fmt.Println()
	fmt.Println("Options:")
	fmt.Println("  -config <file>     Validate configuration file")
	fmt.Println("  -generate          Generate sample configuration file")
	fmt.Println("  -output <file>     Output file for generated config (default: stdout)")
	fmt.Println("  -verbose           Show detailed validation information")
	fmt.Println("  -version           Show version information")
	fmt.Println()
	fmt.Println("Examples:")
	fmt.Println("  # Validate existing configuration")
	fmt.Println("  tor-config-validator -config /etc/tor/torrc")
	fmt.Println()
	fmt.Println("  # Generate sample configuration to stdout")
	fmt.Println("  tor-config-validator -generate")
	fmt.Println()
	fmt.Println("  # Generate sample configuration to file")
	fmt.Println("  tor-config-validator -generate -output /tmp/sample-torrc")
	fmt.Println()
	fmt.Println("  # Validate with verbose output")
	fmt.Println("  tor-config-validator -config myconfig.conf -verbose")
}

func validateConfigFile(path string, verbose bool) error {
	if verbose {
		fmt.Printf("Validating configuration file: %s\n", path)
		fmt.Println()
	}

	// Check if file exists
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return fmt.Errorf("configuration file does not exist: %s", path)
	}

	// Create default config and load from file
	cfg := config.DefaultConfig()
	if err := config.LoadFromFile(path, cfg); err != nil {
		return fmt.Errorf("failed to load configuration: %w", err)
	}

	if verbose {
		fmt.Println("Configuration loaded successfully")
		fmt.Println()
		printConfigSummary(cfg)
	}

	// Validate configuration
	if err := cfg.Validate(); err != nil {
		return fmt.Errorf("validation error: %w", err)
	}

	if verbose {
		fmt.Println()
		fmt.Println("All validation checks passed")
	}

	return nil
}

func generateSampleConfig(outputPath string, verbose bool) error {
	cfg := config.DefaultConfig()

	// Build sample config content
	var sb strings.Builder

	sb.WriteString("# Sample Tor Configuration File\n")
	sb.WriteString("# Generated by tor-config-validator\n")
	sb.WriteString("# For more information, see the documentation at:\n")
	sb.WriteString("# https://github.com/opd-ai/go-tor/docs\n")
	sb.WriteString("\n")

	sb.WriteString("# Network Settings\n")
	sb.WriteString(fmt.Sprintf("SocksPort %d\n", cfg.SocksPort))
	sb.WriteString(fmt.Sprintf("ControlPort %d\n", cfg.ControlPort))
	sb.WriteString("\n")

	sb.WriteString("# Data Directory\n")
	sb.WriteString(fmt.Sprintf("DataDirectory %s\n", cfg.DataDirectory))
	sb.WriteString("\n")

	sb.WriteString("# Logging\n")
	sb.WriteString(fmt.Sprintf("LogLevel %s\n", cfg.LogLevel))
	sb.WriteString("\n")

	sb.WriteString("# Circuit Configuration\n")
	sb.WriteString(fmt.Sprintf("NumEntryGuards %d\n", cfg.NumEntryGuards))
	sb.WriteString(fmt.Sprintf("CircuitBuildTimeout %s\n", cfg.CircuitBuildTimeout))
	sb.WriteString(fmt.Sprintf("MaxCircuitDirtiness %s\n", cfg.MaxCircuitDirtiness))
	sb.WriteString(fmt.Sprintf("NewCircuitPeriod %s\n", cfg.NewCircuitPeriod))
	sb.WriteString("\n")

	sb.WriteString("# Connection Settings\n")
	sb.WriteString(fmt.Sprintf("ConnLimit %d\n", cfg.ConnLimit))
	sb.WriteString(fmt.Sprintf("DormantTimeout %s\n", cfg.DormantTimeout))
	sb.WriteString("\n")

	sb.WriteString("# Performance Tuning\n")
	sb.WriteString(fmt.Sprintf("# EnableConnectionPooling %t\n", cfg.EnableConnectionPooling))
	sb.WriteString(fmt.Sprintf("# ConnectionPoolMaxIdle %d\n", cfg.ConnectionPoolMaxIdle))
	sb.WriteString(fmt.Sprintf("# ConnectionPoolMaxLife %s\n", cfg.ConnectionPoolMaxLife))
	sb.WriteString(fmt.Sprintf("# EnableCircuitPrebuilding %t\n", cfg.EnableCircuitPrebuilding))
	sb.WriteString(fmt.Sprintf("# CircuitPoolMinSize %d\n", cfg.CircuitPoolMinSize))
	sb.WriteString(fmt.Sprintf("# CircuitPoolMaxSize %d\n", cfg.CircuitPoolMaxSize))
	sb.WriteString(fmt.Sprintf("# EnableBufferPooling %t\n", cfg.EnableBufferPooling))
	sb.WriteString("\n")

	sb.WriteString("# Circuit Isolation\n")
	sb.WriteString(fmt.Sprintf("# IsolationLevel %s\n", cfg.IsolationLevel))
	sb.WriteString(fmt.Sprintf("# IsolateDestinations %t\n", cfg.IsolateDestinations))
	sb.WriteString(fmt.Sprintf("# IsolateSOCKSAuth %t\n", cfg.IsolateSOCKSAuth))
	sb.WriteString(fmt.Sprintf("# IsolateClientPort %t\n", cfg.IsolateClientPort))
	sb.WriteString("\n")

	sb.WriteString("# HTTP Metrics (optional)\n")
	sb.WriteString("# EnableMetrics false\n")
	sb.WriteString("# MetricsPort 9052\n")
	sb.WriteString("\n")

	sb.WriteString("# Security Settings\n")
	sb.WriteString("# SafeLogging true\n")
	sb.WriteString("# UseEntryGuards true\n")
	sb.WriteString("\n")

	content := sb.String()

	// Write to file or stdout
	if outputPath != "" {
		// Create directory if it doesn't exist
		dir := filepath.Dir(outputPath)
		if err := os.MkdirAll(dir, 0o755); err != nil {
			return fmt.Errorf("failed to create directory: %w", err)
		}

		// Write file
		if err := os.WriteFile(outputPath, []byte(content), 0o644); err != nil {
			return fmt.Errorf("failed to write file: %w", err)
		}

		if verbose {
			fmt.Printf("Sample configuration written to: %s\n", outputPath)
		} else {
			fmt.Printf("Configuration file created: %s\n", outputPath)
		}
	} else {
		// Write to stdout
		fmt.Print(content)
	}

	return nil
}

func printConfigSummary(cfg *config.Config) {
	fmt.Println("Configuration Summary:")
	fmt.Println("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

	fmt.Println("\nNetwork Settings:")
	fmt.Printf("  SOCKS Port:       %d\n", cfg.SocksPort)
	fmt.Printf("  Control Port:     %d\n", cfg.ControlPort)
	if cfg.EnableMetrics {
		fmt.Printf("  Metrics Port:     %d\n", cfg.MetricsPort)
	}

	fmt.Println("\nPaths:")
	fmt.Printf("  Data Directory:   %s\n", cfg.DataDirectory)

	fmt.Println("\nLogging:")
	fmt.Printf("  Log Level:        %s\n", cfg.LogLevel)

	fmt.Println("\nCircuit Configuration:")
	fmt.Printf("  Num Entry Guards: %d\n", cfg.NumEntryGuards)
	fmt.Printf("  Build Timeout:    %s\n", cfg.CircuitBuildTimeout)
	fmt.Printf("  Max Dirtiness:    %s\n", cfg.MaxCircuitDirtiness)
	fmt.Printf("  New Circuit Per:  %s\n", cfg.NewCircuitPeriod)

	fmt.Println("\nConnection Settings:")
	fmt.Printf("  Conn Limit:       %d\n", cfg.ConnLimit)
	fmt.Printf("  Dormant Timeout:  %s\n", cfg.DormantTimeout)

	fmt.Println("\nPerformance:")
	fmt.Printf("  Conn Pooling:     %t\n", cfg.EnableConnectionPooling)
	if cfg.EnableConnectionPooling {
		fmt.Printf("  Pool Max Idle:    %d\n", cfg.ConnectionPoolMaxIdle)
		fmt.Printf("  Pool Max Life:    %s\n", cfg.ConnectionPoolMaxLife)
	}
	fmt.Printf("  Circuit Prebuild: %t\n", cfg.EnableCircuitPrebuilding)
	if cfg.EnableCircuitPrebuilding {
		fmt.Printf("  Pool Min Size:    %d\n", cfg.CircuitPoolMinSize)
		fmt.Printf("  Pool Max Size:    %d\n", cfg.CircuitPoolMaxSize)
	}
	fmt.Printf("  Buffer Pooling:   %t\n", cfg.EnableBufferPooling)

	fmt.Println("\nCircuit Isolation:")
	fmt.Printf("  Isolation Level:  %s\n", cfg.IsolationLevel)
	fmt.Printf("  Isolate Dest:     %t\n", cfg.IsolateDestinations)
	fmt.Printf("  Isolate SOCKS:    %t\n", cfg.IsolateSOCKSAuth)
	fmt.Printf("  Isolate Port:     %t\n", cfg.IsolateClientPort)

	fmt.Println("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
}
