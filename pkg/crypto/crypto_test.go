package crypto

import (
	"bytes"
	"crypto/aes"
	"testing"
)

func TestGenerateRandomBytes(t *testing.T) {
	tests := []int{16, 32, 64}

	for _, n := range tests {
		t.Run("", func(t *testing.T) {
			b, err := GenerateRandomBytes(n)
			if err != nil {
				t.Fatalf("GenerateRandomBytes() error = %v", err)
			}
			if len(b) != n {
				t.Errorf("length = %v, want %v", len(b), n)
			}
			// Check that it's not all zeros (very unlikely with random data)
			allZero := true
			for _, v := range b {
				if v != 0 {
					allZero = false
					break
				}
			}
			if allZero {
				t.Error("generated bytes are all zero (highly unlikely)")
			}
		})
	}
}

func TestSHA1Hash(t *testing.T) {
	tests := []struct {
		input    []byte
		expected []byte
	}{
		{
			[]byte(""),
			[]byte{0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
				0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09},
		},
		{
			[]byte("hello"),
			[]byte{0xaa, 0xf4, 0xc6, 0x1d, 0xdc, 0xc5, 0xe8, 0xa2, 0xda, 0xbe,
				0xde, 0x0f, 0x3b, 0x48, 0x2c, 0xd9, 0xae, 0xa9, 0x43, 0x4d},
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := SHA1Hash(tt.input)
			if !bytes.Equal(got, tt.expected) {
				t.Errorf("SHA1Hash() = %x, want %x", got, tt.expected)
			}
			if len(got) != SHA1Size {
				t.Errorf("SHA1Hash() length = %v, want %v", len(got), SHA1Size)
			}
		})
	}
}

func TestSHA256Hash(t *testing.T) {
	tests := []struct {
		input    []byte
		expected []byte
	}{
		{
			[]byte(""),
			[]byte{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb,
				0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4,
				0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52,
				0xb8, 0x55},
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := SHA256Hash(tt.input)
			if !bytes.Equal(got, tt.expected) {
				t.Errorf("SHA256Hash() = %x, want %x", got, tt.expected)
			}
			if len(got) != SHA256Size {
				t.Errorf("SHA256Hash() length = %v, want %v", len(got), SHA256Size)
			}
		})
	}
}

func TestAESCTRCipher(t *testing.T) {
	key := []byte("0123456789abcdef") // 16 bytes
	iv := make([]byte, aes.BlockSize)

	plaintext := []byte("Hello, World! This is a test message.")

	// Create cipher for encryption
	encCipher, err := NewAESCTRCipher(key, iv)
	if err != nil {
		t.Fatalf("NewAESCTRCipher() error = %v", err)
	}

	// Encrypt
	ciphertext := make([]byte, len(plaintext))
	copy(ciphertext, plaintext)
	encCipher.Encrypt(ciphertext)

	// Ciphertext should be different from plaintext
	if bytes.Equal(ciphertext, plaintext) {
		t.Error("ciphertext equals plaintext")
	}

	// Create cipher for decryption (with same key and IV)
	decCipher, err := NewAESCTRCipher(key, iv)
	if err != nil {
		t.Fatalf("NewAESCTRCipher() error = %v", err)
	}

	// Decrypt
	decrypted := make([]byte, len(ciphertext))
	copy(decrypted, ciphertext)
	decCipher.Decrypt(decrypted)

	// Decrypted should match original plaintext
	if !bytes.Equal(decrypted, plaintext) {
		t.Errorf("decrypted = %v, want %v", decrypted, plaintext)
	}
}

func TestRSAEncryptDecrypt(t *testing.T) {
	// Generate key pair
	privateKey, err := GenerateRSAKey(2048)
	if err != nil {
		t.Fatalf("GenerateRSAKey() error = %v", err)
	}

	publicKey := privateKey.PublicKey()

	// Test data (small enough for RSA)
	plaintext := []byte("Hello, RSA!")

	// Encrypt
	ciphertext, err := publicKey.Encrypt(plaintext)
	if err != nil {
		t.Fatalf("Encrypt() error = %v", err)
	}

	// Ciphertext should be different from plaintext
	if bytes.Equal(ciphertext, plaintext) {
		t.Error("ciphertext equals plaintext")
	}

	// Decrypt
	decrypted, err := privateKey.Decrypt(ciphertext)
	if err != nil {
		t.Fatalf("Decrypt() error = %v", err)
	}

	// Decrypted should match original plaintext
	if !bytes.Equal(decrypted, plaintext) {
		t.Errorf("decrypted = %v, want %v", decrypted, plaintext)
	}
}

func TestNewSHA1DigestWriter(t *testing.T) {
	dw := NewSHA1DigestWriter()
	if dw == nil {
		t.Fatal("NewSHA1DigestWriter() returned nil")
	}

	// Test writing
	data := []byte("test data")
	n, err := dw.Write(data)
	if err != nil {
		t.Fatalf("Write() error = %v", err)
	}
	if n != len(data) {
		t.Errorf("Write() wrote %v bytes, want %v", n, len(data))
	}
}

func TestDeriveKey(t *testing.T) {
	secret := []byte("test secret")

	tests := []struct {
		name    string
		keyLen  int
		wantErr bool
	}{
		{"16 bytes", 16, false},
		{"32 bytes", 32, false},
		{"72 bytes", 72, false}, // For KDF-TOR with full key material
		{"100 bytes", 100, false},
		{"invalid length", 0, true},
		{"negative length", -1, true},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			key, err := DeriveKey(secret, tt.keyLen)
			if (err != nil) != tt.wantErr {
				t.Errorf("DeriveKey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !tt.wantErr {
				if len(key) != tt.keyLen {
					t.Errorf("DeriveKey() key length = %v, want %v", len(key), tt.keyLen)
				}
			}
		})
	}
}

func TestDeriveKeyDeterministic(t *testing.T) {
	secret := []byte("test secret")
	keyLen := 72

	key1, err := DeriveKey(secret, keyLen)
	if err != nil {
		t.Fatalf("DeriveKey() error = %v", err)
	}

	key2, err := DeriveKey(secret, keyLen)
	if err != nil {
		t.Fatalf("DeriveKey() error = %v", err)
	}

	// Same input should produce same output
	if !bytes.Equal(key1, key2) {
		t.Error("DeriveKey() not deterministic")
	}
}

func TestDeriveKeyDifferentSecrets(t *testing.T) {
	secret1 := []byte("secret1")
	secret2 := []byte("secret2")
	keyLen := 32

	key1, err := DeriveKey(secret1, keyLen)
	if err != nil {
		t.Fatalf("DeriveKey() error = %v", err)
	}

	key2, err := DeriveKey(secret2, keyLen)
	if err != nil {
		t.Fatalf("DeriveKey() error = %v", err)
	}

	// Different secrets should produce different keys
	if bytes.Equal(key1, key2) {
		t.Error("DeriveKey() produced same key for different secrets")
	}
}

func TestGenerateNtorKeyPair(t *testing.T) {
	kp1, err := GenerateNtorKeyPair()
	if err != nil {
		t.Fatalf("Failed to generate key pair: %v", err)
	}

	// Check that public and private keys are non-zero
	zeroPriv := [32]byte{}
	zeroPub := [32]byte{}

	if bytes.Equal(kp1.Private[:], zeroPriv[:]) {
		t.Error("Generated all-zero private key")
	}

	if bytes.Equal(kp1.Public[:], zeroPub[:]) {
		t.Error("Generated all-zero public key")
	}

	// Generate another key pair and verify they're different
	kp2, err := GenerateNtorKeyPair()
	if err != nil {
		t.Fatalf("Failed to generate second key pair: %v", err)
	}

	if bytes.Equal(kp1.Private[:], kp2.Private[:]) {
		t.Error("Generated identical private keys")
	}

	if bytes.Equal(kp1.Public[:], kp2.Public[:]) {
		t.Error("Generated identical public keys")
	}
}

func TestNtorClientHandshake(t *testing.T) {
	// Generate mock relay keys
	identityKey := make([]byte, 32)
	ntorOnionKey := make([]byte, 32)

	for i := range identityKey {
		identityKey[i] = byte(i)
	}
	for i := range ntorOnionKey {
		ntorOnionKey[i] = byte(i + 32)
	}

	handshakeData, sharedSecret, err := NtorClientHandshake(identityKey, ntorOnionKey)
	if err != nil {
		t.Fatalf("NtorClientHandshake failed: %v", err)
	}

	// Verify handshake data format: NODEID (20) + KEYID (32) + CLIENT_PK (32) = 84 bytes
	expectedLen := 20 + 32 + 32
	if len(handshakeData) != expectedLen {
		t.Errorf("Handshake data length = %d, want %d", len(handshakeData), expectedLen)
	}

	// Verify NODEID matches first 20 bytes of identity key
	if !bytes.Equal(handshakeData[0:20], identityKey[0:20]) {
		t.Error("NODEID doesn't match identity key")
	}

	// Verify KEYID matches ntor onion key
	if !bytes.Equal(handshakeData[20:52], ntorOnionKey) {
		t.Error("KEYID doesn't match ntor onion key")
	}

	// Shared secret should be non-zero
	zeroSecret := make([]byte, 32)
	if bytes.Equal(sharedSecret, zeroSecret) {
		t.Error("Generated all-zero shared secret")
	}

	// Test with invalid keys
	_, _, err = NtorClientHandshake([]byte("short"), ntorOnionKey)
	if err == nil {
		t.Error("Expected error with invalid identity key length")
	}

	_, _, err = NtorClientHandshake(identityKey, []byte("short"))
	if err == nil {
		t.Error("Expected error with invalid ntor onion key length")
	}
}

// TestNtorProcessResponse tests the server response processing with auth MAC verification
func TestNtorProcessResponse(t *testing.T) {
	// Test with proper mock data to verify MAC computation
	clientPrivate := make([]byte, 32)
	serverNtorKey := make([]byte, 32)
	serverIdentity := make([]byte, 32)

	// Fill with test data
	for i := range clientPrivate {
		clientPrivate[i] = byte(i)
	}
	for i := range serverNtorKey {
		serverNtorKey[i] = byte(i + 32)
	}
	for i := range serverIdentity {
		serverIdentity[i] = byte(i + 64)
	}

	// Test invalid response length
	_, err := NtorProcessResponse([]byte("short"), clientPrivate, serverNtorKey, serverIdentity)
	if err == nil {
		t.Error("Expected error with invalid response length")
	}

	// Note: Full end-to-end test would require a real server response
	// For now, we verify that the function properly rejects invalid auth MACs
	// A production test would involve:
	// 1. Client generates handshake with NtorClientHandshake
	// 2. Simulated server computes response with matching keys
	// 3. Client verifies with NtorProcessResponse
	// This requires implementing the server side, which is out of scope for client-only testing
}

// TestConstantTimeCompare tests the constant-time comparison function
func TestConstantTimeCompare(t *testing.T) {
	tests := []struct {
		name string
		a    []byte
		b    []byte
		want bool
	}{
		{
			name: "equal slices",
			a:    []byte{1, 2, 3, 4},
			b:    []byte{1, 2, 3, 4},
			want: true,
		},
		{
			name: "different slices",
			a:    []byte{1, 2, 3, 4},
			b:    []byte{1, 2, 3, 5},
			want: false,
		},
		{
			name: "different lengths",
			a:    []byte{1, 2, 3},
			b:    []byte{1, 2, 3, 4},
			want: false,
		},
		{
			name: "empty slices",
			a:    []byte{},
			b:    []byte{},
			want: true,
		},
		{
			name: "one byte difference",
			a:    []byte{0xff, 0xff, 0xff, 0xff},
			b:    []byte{0xff, 0xff, 0xff, 0xfe},
			want: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := constantTimeCompare(tt.a, tt.b)
			if got != tt.want {
				t.Errorf("constantTimeCompare() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEd25519Verify(t *testing.T) {
	// Generate a key pair
	pub, priv, err := GenerateEd25519KeyPair()
	if err != nil {
		t.Fatalf("Failed to generate Ed25519 key pair: %v", err)
	}

	message := []byte("test message for signature verification")

	// Sign the message
	signature, err := Ed25519Sign(priv, message)
	if err != nil {
		t.Fatalf("Failed to sign message: %v", err)
	}

	// Verify the signature
	if !Ed25519Verify(pub, message, signature) {
		t.Error("Valid signature failed verification")
	}

	// Test with wrong message
	wrongMessage := []byte("wrong message")
	if Ed25519Verify(pub, wrongMessage, signature) {
		t.Error("Signature verified with wrong message")
	}

	// Test with wrong public key
	wrongPub := make([]byte, 32)
	copy(wrongPub, pub)
	wrongPub[0] ^= 0xFF // Flip bits
	if Ed25519Verify(wrongPub, message, signature) {
		t.Error("Signature verified with wrong public key")
	}

	// Test with invalid key length
	if Ed25519Verify([]byte("short"), message, signature) {
		t.Error("Verification succeeded with invalid public key length")
	}

	// Test with invalid signature length
	if Ed25519Verify(pub, message, []byte("short")) {
		t.Error("Verification succeeded with invalid signature length")
	}
}

func TestGenerateEd25519KeyPair(t *testing.T) {
	pub1, priv1, err := GenerateEd25519KeyPair()
	if err != nil {
		t.Fatalf("Failed to generate first key pair: %v", err)
	}

	// Check key lengths
	if len(pub1) != 32 {
		t.Errorf("Public key length = %d, want 32", len(pub1))
	}
	if len(priv1) != 64 {
		t.Errorf("Private key length = %d, want 64", len(priv1))
	}

	// Generate another key pair and verify they're different
	pub2, priv2, err := GenerateEd25519KeyPair()
	if err != nil {
		t.Fatalf("Failed to generate second key pair: %v", err)
	}

	if bytes.Equal(pub1, pub2) {
		t.Error("Generated identical public keys")
	}

	if bytes.Equal(priv1, priv2) {
		t.Error("Generated identical private keys")
	}
}

// SEC-L003: Tests for buffer pooling functionality
func TestBufferPooling(t *testing.T) {
	// Get a buffer from the pool
	buf1 := GetBuffer()
	if len(buf1) != 512 {
		t.Errorf("GetBuffer() returned buffer of length %d, want 512", len(buf1))
	}

	// Write some data to it
	for i := 0; i < len(buf1); i++ {
		buf1[i] = byte(i % 256)
	}

	// Return it to the pool
	PutBuffer(buf1)

	// Get another buffer (may or may not be the same one)
	buf2 := GetBuffer()
	if len(buf2) != 512 {
		t.Errorf("GetBuffer() returned buffer of length %d, want 512", len(buf2))
	}

	// Return it
	PutBuffer(buf2)
}

func TestBufferPoolConcurrency(t *testing.T) {
	// Test concurrent access to buffer pool
	const numGoroutines = 10
	const opsPerGoroutine = 100

	done := make(chan bool, numGoroutines)

	for i := 0; i < numGoroutines; i++ {
		go func() {
			for j := 0; j < opsPerGoroutine; j++ {
				buf := GetBuffer()
				// Use the buffer
				for k := 0; k < len(buf); k++ {
					buf[k] = byte(k)
				}
				PutBuffer(buf)
			}
			done <- true
		}()
	}

	// Wait for all goroutines
	for i := 0; i < numGoroutines; i++ {
		<-done
	}
}

func TestBufferPoolSmallBuffer(t *testing.T) {
	// Test that small buffers are not returned to pool
	smallBuf := make([]byte, 100)
	PutBuffer(smallBuf) // Should not panic, just ignore

	// Get a buffer - should be 512 bytes
	buf := GetBuffer()
	if len(buf) != 512 {
		t.Errorf("GetBuffer() returned buffer of length %d after putting small buffer", len(buf))
	}
	PutBuffer(buf)
}
