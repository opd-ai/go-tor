package crypto

import (
	"bytes"
	"crypto/aes"
	"testing"
)

func TestGenerateRandomBytes(t *testing.T) {
	tests := []int{16, 32, 64}

	for _, n := range tests {
		t.Run("", func(t *testing.T) {
			b, err := GenerateRandomBytes(n)
			if err != nil {
				t.Fatalf("GenerateRandomBytes() error = %v", err)
			}
			if len(b) != n {
				t.Errorf("length = %v, want %v", len(b), n)
			}
			// Check that it's not all zeros (very unlikely with random data)
			allZero := true
			for _, v := range b {
				if v != 0 {
					allZero = false
					break
				}
			}
			if allZero {
				t.Error("generated bytes are all zero (highly unlikely)")
			}
		})
	}
}

func TestSHA1Hash(t *testing.T) {
	tests := []struct {
		input    []byte
		expected []byte
	}{
		{
			[]byte(""),
			[]byte{0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
				0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09},
		},
		{
			[]byte("hello"),
			[]byte{0xaa, 0xf4, 0xc6, 0x1d, 0xdc, 0xc5, 0xe8, 0xa2, 0xda, 0xbe,
				0xde, 0x0f, 0x3b, 0x48, 0x2c, 0xd9, 0xae, 0xa9, 0x43, 0x4d},
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := SHA1Hash(tt.input)
			if !bytes.Equal(got, tt.expected) {
				t.Errorf("SHA1Hash() = %x, want %x", got, tt.expected)
			}
			if len(got) != SHA1Size {
				t.Errorf("SHA1Hash() length = %v, want %v", len(got), SHA1Size)
			}
		})
	}
}

func TestSHA256Hash(t *testing.T) {
	tests := []struct {
		input    []byte
		expected []byte
	}{
		{
			[]byte(""),
			[]byte{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb,
				0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4,
				0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52,
				0xb8, 0x55},
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := SHA256Hash(tt.input)
			if !bytes.Equal(got, tt.expected) {
				t.Errorf("SHA256Hash() = %x, want %x", got, tt.expected)
			}
			if len(got) != SHA256Size {
				t.Errorf("SHA256Hash() length = %v, want %v", len(got), SHA256Size)
			}
		})
	}
}

func TestAESCTRCipher(t *testing.T) {
	key := []byte("0123456789abcdef") // 16 bytes
	iv := make([]byte, aes.BlockSize)

	plaintext := []byte("Hello, World! This is a test message.")

	// Create cipher for encryption
	encCipher, err := NewAESCTRCipher(key, iv)
	if err != nil {
		t.Fatalf("NewAESCTRCipher() error = %v", err)
	}

	// Encrypt
	ciphertext := make([]byte, len(plaintext))
	copy(ciphertext, plaintext)
	encCipher.Encrypt(ciphertext)

	// Ciphertext should be different from plaintext
	if bytes.Equal(ciphertext, plaintext) {
		t.Error("ciphertext equals plaintext")
	}

	// Create cipher for decryption (with same key and IV)
	decCipher, err := NewAESCTRCipher(key, iv)
	if err != nil {
		t.Fatalf("NewAESCTRCipher() error = %v", err)
	}

	// Decrypt
	decrypted := make([]byte, len(ciphertext))
	copy(decrypted, ciphertext)
	decCipher.Decrypt(decrypted)

	// Decrypted should match original plaintext
	if !bytes.Equal(decrypted, plaintext) {
		t.Errorf("decrypted = %v, want %v", decrypted, plaintext)
	}
}

func TestRSAEncryptDecrypt(t *testing.T) {
	// Generate key pair
	privateKey, err := GenerateRSAKey(2048)
	if err != nil {
		t.Fatalf("GenerateRSAKey() error = %v", err)
	}

	publicKey := privateKey.PublicKey()

	// Test data (small enough for RSA)
	plaintext := []byte("Hello, RSA!")

	// Encrypt
	ciphertext, err := publicKey.Encrypt(plaintext)
	if err != nil {
		t.Fatalf("Encrypt() error = %v", err)
	}

	// Ciphertext should be different from plaintext
	if bytes.Equal(ciphertext, plaintext) {
		t.Error("ciphertext equals plaintext")
	}

	// Decrypt
	decrypted, err := privateKey.Decrypt(ciphertext)
	if err != nil {
		t.Fatalf("Decrypt() error = %v", err)
	}

	// Decrypted should match original plaintext
	if !bytes.Equal(decrypted, plaintext) {
		t.Errorf("decrypted = %v, want %v", decrypted, plaintext)
	}
}

func TestNewSHA1DigestWriter(t *testing.T) {
	dw := NewSHA1DigestWriter()
	if dw == nil {
		t.Fatal("NewSHA1DigestWriter() returned nil")
	}

	// Test writing
	data := []byte("test data")
	n, err := dw.Write(data)
	if err != nil {
		t.Fatalf("Write() error = %v", err)
	}
	if n != len(data) {
		t.Errorf("Write() wrote %v bytes, want %v", n, len(data))
	}
}
